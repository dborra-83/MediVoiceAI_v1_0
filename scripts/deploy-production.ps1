# MediVoice AI - Script de Deploy Automatizado para Windows
# Usage: .\scripts\deploy-production.ps1 [environment]

param(
    [Parameter(Position=0)]
    [string]$Environment = "dev"
)

# Configuration
$ProjectName = "medivoice-ai"
$AwsRegion = if ($env:AWS_REGION) { $env:AWS_REGION } else { "us-east-1" }

Write-Host "üöÄ MediVoice AI Deployment Script" -ForegroundColor Blue
Write-Host "Environment: $Environment" -ForegroundColor Blue
Write-Host "Region: $AwsRegion" -ForegroundColor Blue
Write-Host ""

# Function to check if command exists
function Test-Command {
    param($Command)
    $null = Get-Command $Command -ErrorAction SilentlyContinue
    return $?
}

# Check prerequisites
Write-Host "üìã Checking prerequisites..." -ForegroundColor Yellow

if (-not (Test-Command "aws")) {
    Write-Host "‚ùå AWS CLI is not installed" -ForegroundColor Red
    exit 1
}

if (-not (Test-Command "terraform")) {
    Write-Host "‚ùå Terraform is not installed" -ForegroundColor Red
    exit 1
}

if (-not (Test-Command "npm")) {
    Write-Host "‚ùå npm is not installed" -ForegroundColor Red
    exit 1
}

if (-not (Test-Command "sls")) {
    Write-Host "‚ùå Serverless Framework is not installed" -ForegroundColor Red
    Write-Host "Install with: npm install -g serverless" -ForegroundColor Yellow
    exit 1
}

# Check AWS credentials
$awsTest = aws sts get-caller-identity 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå AWS credentials are not configured" -ForegroundColor Red
    Write-Host "Run: aws configure" -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ All prerequisites satisfied" -ForegroundColor Green
Write-Host ""

# Step 1: Deploy Infrastructure
Write-Host "üèóÔ∏è  Step 1: Deploying Infrastructure with Terraform..." -ForegroundColor Yellow

Set-Location infra

# Check if terraform.tfvars exists
if (-not (Test-Path "terraform.tfvars")) {
    Write-Host "‚ùå terraform.tfvars not found" -ForegroundColor Red
    Write-Host "Copy terraform.tfvars.example to terraform.tfvars and configure it" -ForegroundColor Yellow
    exit 1
}

# Initialize Terraform
Write-Host "Initializing Terraform..." -ForegroundColor Blue
terraform init

# Plan deployment
Write-Host "Planning Terraform deployment..." -ForegroundColor Blue
terraform plan -var="environment=$Environment"

# Ask for confirmation
$confirmation = Read-Host "Do you want to proceed with the infrastructure deployment? (y/N)"
if ($confirmation -ne 'y' -and $confirmation -ne 'Y') {
    Write-Host "Deployment cancelled" -ForegroundColor Yellow
    exit 1
}

# Apply infrastructure
Write-Host "Applying Terraform configuration..." -ForegroundColor Blue
terraform apply -var="environment=$Environment" -auto-approve

# Get outputs
Write-Host "Getting Terraform outputs..." -ForegroundColor Blue
$ApiGatewayUrl = terraform output -raw api_gateway_url
$AudioBucketName = terraform output -raw audio_bucket_name
$PdfBucketName = terraform output -raw pdf_bucket_name
$ConsultationsTable = terraform output -raw consultations_table_name
$DoctorsTable = terraform output -raw doctors_table_name
$PromptsTable = terraform output -raw prompts_table_name
$CognitoUserPoolId = terraform output -raw cognito_user_pool_id
$CognitoAppClientId = terraform output -raw cognito_app_client_id
$CognitoUserPoolArn = terraform output -raw cognito_user_pool_arn

Write-Host "‚úÖ Infrastructure deployed successfully" -ForegroundColor Green
Write-Host "API Gateway URL: $ApiGatewayUrl" -ForegroundColor Green
Write-Host ""

Set-Location ..

# Step 2: Deploy Backend (Serverless)
Write-Host "‚ö° Step 2: Deploying Backend with Serverless..." -ForegroundColor Yellow

Set-Location backend

# Install dependencies
Write-Host "Installing backend dependencies..." -ForegroundColor Blue
npm install

# Set environment variables for Serverless
$env:AUDIO_BUCKET_NAME = $AudioBucketName
$env:PDF_BUCKET_NAME = $PdfBucketName
$env:CONSULTATIONS_TABLE = $ConsultationsTable
$env:DOCTORS_TABLE = $DoctorsTable
$env:PROMPTS_TABLE = $PromptsTable
$env:COGNITO_USER_POOL_ARN = $CognitoUserPoolArn
$env:AWS_REGION = $AwsRegion
$env:STAGE = $Environment

# Deploy Serverless
Write-Host "Deploying Serverless functions..." -ForegroundColor Blue
sls deploy --stage $Environment

Write-Host "‚úÖ Backend deployed successfully" -ForegroundColor Green
Write-Host ""

Set-Location ..

# Step 3: Configure Frontend
Write-Host "üé® Step 3: Configuring Frontend..." -ForegroundColor Yellow

Set-Location frontend

# Install dependencies
Write-Host "Installing frontend dependencies..." -ForegroundColor Blue
npm install

# Create or update .env.local
Write-Host "Updating frontend configuration..." -ForegroundColor Blue

$envContent = @"
# MediVoice AI Frontend Configuration - Generated by deploy script
VITE_API_URL=$ApiGatewayUrl
VITE_AWS_REGION=$AwsRegion
VITE_COGNITO_USER_POOL_ID=$CognitoUserPoolId
VITE_COGNITO_APP_CLIENT_ID=$CognitoAppClientId
VITE_ENABLE_AUTH=false
VITE_ENVIRONMENT=$Environment
"@

$envContent | Out-File -FilePath ".env.local" -Encoding UTF8

Write-Host "‚úÖ Frontend configured successfully" -ForegroundColor Green
Write-Host ""

Set-Location ..

# Step 4: Initialize Data (Optional)
Write-Host "üìä Step 4: Initializing data..." -ForegroundColor Yellow

Write-Host "Adding initial medical prompts..." -ForegroundColor Blue

# Create a basic medical prompt in DynamoDB
$promptItem = @{
    "prompt_id" = @{"S" = "medical-analysis"}
    "specialty" = @{"S" = "general"}
    "title" = @{"S" = "An√°lisis M√©dico General"}
    "content" = @{"S" = "Como m√©dico especialista, analiza la siguiente transcripci√≥n de una consulta m√©dica y proporciona un an√°lisis detallado con diagn√≥stico, s√≠ntomas y recomendaciones terap√©uticas."}
    "is_active" = @{"BOOL" = $true}
    "created_at" = @{"S" = (Get-Date -Format "yyyy-MM-ddTHH:mm:ssZ")}
} | ConvertTo-Json -Depth 3

try {
    aws dynamodb put-item --table-name $PromptsTable --item $promptItem --region $AwsRegion 2>$null
}
catch {
    Write-Host "Note: Prompt may already exist" -ForegroundColor Yellow
}

# Create a demo doctor
$doctorItem = @{
    "doctor_id" = @{"S" = "doctor-demo"}
    "name" = @{"S" = "Dr. Demo MediVoice"}
    "specialty" = @{"S" = "Medicina General"}
    "license_number" = @{"S" = "MD-12345"}
    "institution" = @{"S" = "Hospital Demo"}
    "phone" = @{"S" = "+1-555-0123"}
    "email" = @{"S" = "doctor@medivoice.demo"}
} | ConvertTo-Json -Depth 3

try {
    aws dynamodb put-item --table-name $DoctorsTable --item $doctorItem --region $AwsRegion 2>$null
}
catch {
    Write-Host "Note: Doctor may already exist" -ForegroundColor Yellow
}

Write-Host "‚úÖ Initial data created" -ForegroundColor Green
Write-Host ""

# Step 5: Verification
Write-Host "üîç Step 5: Verifying deployment..." -ForegroundColor Yellow

# Test API Gateway endpoint
Write-Host "Testing API Gateway endpoint..." -ForegroundColor Blue
try {
    $response = Invoke-WebRequest -Uri "$ApiGatewayUrl/api/audio" -Method OPTIONS -Headers @{"Origin"="http://localhost:5173"} -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ API Gateway is responding correctly" -ForegroundColor Green
    }
    else {
        Write-Host "‚ö†Ô∏è  API Gateway returned status: $($response.StatusCode)" -ForegroundColor Yellow
    }
}
catch {
    Write-Host "‚ö†Ô∏è  Could not test API Gateway endpoint" -ForegroundColor Yellow
}

# Test DynamoDB tables
Write-Host "Testing DynamoDB tables..." -ForegroundColor Blue
$tables = aws dynamodb list-tables --region $AwsRegion --query "TableNames[?contains(@, '$ProjectName')]" --output text
$tablesCount = ($tables -split "`t").Count
Write-Host "‚úÖ Found $tablesCount DynamoDB tables" -ForegroundColor Green

# Test S3 buckets
Write-Host "Testing S3 buckets..." -ForegroundColor Blue
$buckets = aws s3 ls | Select-String $ProjectName
$bucketsCount = $buckets.Count
Write-Host "‚úÖ Found $bucketsCount S3 buckets" -ForegroundColor Green

Write-Host ""
Write-Host "üéâ Deployment completed successfully!" -ForegroundColor Green
Write-Host ""
Write-Host "üìã Deployment Summary:" -ForegroundColor Blue
Write-Host "Environment: $Environment" -ForegroundColor Blue
Write-Host "API Gateway URL: $ApiGatewayUrl" -ForegroundColor Blue
Write-Host "Cognito User Pool: $CognitoUserPoolId" -ForegroundColor Blue
Write-Host "Audio Bucket: $AudioBucketName" -ForegroundColor Blue
Write-Host "PDF Bucket: $PdfBucketName" -ForegroundColor Blue
Write-Host ""
Write-Host "üìù Next Steps:" -ForegroundColor Yellow
Write-Host "1. Start the frontend: cd frontend && npm run dev" -ForegroundColor Yellow
Write-Host "2. Access the app at: http://localhost:5173" -ForegroundColor Yellow
Write-Host "3. Enable Claude 3 Sonnet in AWS Bedrock console if not done" -ForegroundColor Yellow
Write-Host "4. Configure authentication if needed" -ForegroundColor Yellow
Write-Host ""
Write-Host "üè• MediVoice AI is ready to use!" -ForegroundColor Green