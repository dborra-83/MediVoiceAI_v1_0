#!/bin/bash

# MediVoice AI - Script de Deploy Automatizado
# Usage: ./scripts/deploy-production.sh [environment]

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
ENVIRONMENT=${1:-dev}
PROJECT_NAME="medivoice-ai"
AWS_REGION=${AWS_REGION:-us-east-1}

echo -e "${BLUE}üöÄ MediVoice AI Deployment Script${NC}"
echo -e "${BLUE}Environment: ${ENVIRONMENT}${NC}"
echo -e "${BLUE}Region: ${AWS_REGION}${NC}"
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo -e "${YELLOW}üìã Checking prerequisites...${NC}"

if ! command_exists aws; then
    echo -e "${RED}‚ùå AWS CLI is not installed${NC}"
    exit 1
fi

if ! command_exists terraform; then
    echo -e "${RED}‚ùå Terraform is not installed${NC}"
    exit 1
fi

if ! command_exists npm; then
    echo -e "${RED}‚ùå npm is not installed${NC}"
    exit 1
fi

if ! command_exists sls; then
    echo -e "${RED}‚ùå Serverless Framework is not installed${NC}"
    echo -e "${YELLOW}Install with: npm install -g serverless${NC}"
    exit 1
fi

# Check AWS credentials
if ! aws sts get-caller-identity >/dev/null 2>&1; then
    echo -e "${RED}‚ùå AWS credentials are not configured${NC}"
    echo -e "${YELLOW}Run: aws configure${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ All prerequisites satisfied${NC}"
echo ""

# Step 1: Deploy Infrastructure
echo -e "${YELLOW}üèóÔ∏è  Step 1: Deploying Infrastructure with Terraform...${NC}"

cd infra

# Check if terraform.tfvars exists
if [ ! -f terraform.tfvars ]; then
    echo -e "${RED}‚ùå terraform.tfvars not found${NC}"
    echo -e "${YELLOW}Copy terraform.tfvars.example to terraform.tfvars and configure it${NC}"
    exit 1
fi

# Initialize Terraform
echo -e "${BLUE}Initializing Terraform...${NC}"
terraform init

# Plan deployment
echo -e "${BLUE}Planning Terraform deployment...${NC}"
terraform plan -var="environment=${ENVIRONMENT}"

# Ask for confirmation
read -p "Do you want to proceed with the infrastructure deployment? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Deployment cancelled${NC}"
    exit 1
fi

# Apply infrastructure
echo -e "${BLUE}Applying Terraform configuration...${NC}"
terraform apply -var="environment=${ENVIRONMENT}" -auto-approve

# Get outputs
echo -e "${BLUE}Getting Terraform outputs...${NC}"
API_GATEWAY_URL=$(terraform output -raw api_gateway_url)
AUDIO_BUCKET_NAME=$(terraform output -raw audio_bucket_name)
PDF_BUCKET_NAME=$(terraform output -raw pdf_bucket_name)
CONSULTATIONS_TABLE=$(terraform output -raw consultations_table_name)
DOCTORS_TABLE=$(terraform output -raw doctors_table_name)
PROMPTS_TABLE=$(terraform output -raw prompts_table_name)
COGNITO_USER_POOL_ID=$(terraform output -raw cognito_user_pool_id)
COGNITO_APP_CLIENT_ID=$(terraform output -raw cognito_app_client_id)
COGNITO_USER_POOL_ARN=$(terraform output -raw cognito_user_pool_arn)

echo -e "${GREEN}‚úÖ Infrastructure deployed successfully${NC}"
echo -e "${GREEN}API Gateway URL: ${API_GATEWAY_URL}${NC}"
echo ""

cd ..

# Step 2: Deploy Backend (Serverless)
echo -e "${YELLOW}‚ö° Step 2: Deploying Backend with Serverless...${NC}"

cd backend

# Install dependencies
echo -e "${BLUE}Installing backend dependencies...${NC}"
npm install

# Set environment variables for Serverless
export AUDIO_BUCKET_NAME="${AUDIO_BUCKET_NAME}"
export PDF_BUCKET_NAME="${PDF_BUCKET_NAME}"
export CONSULTATIONS_TABLE="${CONSULTATIONS_TABLE}"
export DOCTORS_TABLE="${DOCTORS_TABLE}"
export PROMPTS_TABLE="${PROMPTS_TABLE}"
export COGNITO_USER_POOL_ARN="${COGNITO_USER_POOL_ARN}"
export AWS_REGION="${AWS_REGION}"
export STAGE="${ENVIRONMENT}"

# Deploy Serverless
echo -e "${BLUE}Deploying Serverless functions...${NC}"
sls deploy --stage ${ENVIRONMENT}

echo -e "${GREEN}‚úÖ Backend deployed successfully${NC}"
echo ""

cd ..

# Step 3: Configure Frontend
echo -e "${YELLOW}üé® Step 3: Configuring Frontend...${NC}"

cd frontend

# Install dependencies
echo -e "${BLUE}Installing frontend dependencies...${NC}"
npm install

# Create or update .env.local
echo -e "${BLUE}Updating frontend configuration...${NC}"
cat > .env.local << EOF
# MediVoice AI Frontend Configuration - Generated by deploy script
VITE_API_URL=${API_GATEWAY_URL}
VITE_AWS_REGION=${AWS_REGION}
VITE_COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
VITE_COGNITO_APP_CLIENT_ID=${COGNITO_APP_CLIENT_ID}
VITE_ENABLE_AUTH=false
VITE_ENVIRONMENT=${ENVIRONMENT}
EOF

echo -e "${GREEN}‚úÖ Frontend configured successfully${NC}"
echo ""

cd ..

# Step 4: Initialize Data (Optional)
echo -e "${YELLOW}üìä Step 4: Initializing data...${NC}"

echo -e "${BLUE}Adding initial medical prompts...${NC}"

# Create a basic medical prompt in DynamoDB
aws dynamodb put-item \
    --table-name "${PROMPTS_TABLE}" \
    --item '{
        "prompt_id": {"S": "medical-analysis"},
        "specialty": {"S": "general"},
        "title": {"S": "An√°lisis M√©dico General"},
        "content": {"S": "Como m√©dico especialista, analiza la siguiente transcripci√≥n de una consulta m√©dica y proporciona un an√°lisis detallado con diagn√≥stico, s√≠ntomas y recomendaciones terap√©uticas."},
        "is_active": {"BOOL": true},
        "created_at": {"S": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}
    }' \
    --region ${AWS_REGION} 2>/dev/null || echo -e "${YELLOW}Note: Prompt may already exist${NC}"

# Create a demo doctor
aws dynamodb put-item \
    --table-name "${DOCTORS_TABLE}" \
    --item '{
        "doctor_id": {"S": "doctor-demo"},
        "name": {"S": "Dr. Demo MediVoice"},
        "specialty": {"S": "Medicina General"},
        "license_number": {"S": "MD-12345"},
        "institution": {"S": "Hospital Demo"},
        "phone": {"S": "+1-555-0123"},
        "email": {"S": "doctor@medivoice.demo"}
    }' \
    --region ${AWS_REGION} 2>/dev/null || echo -e "${YELLOW}Note: Doctor may already exist${NC}"

echo -e "${GREEN}‚úÖ Initial data created${NC}"
echo ""

# Step 5: Verification
echo -e "${YELLOW}üîç Step 5: Verifying deployment...${NC}"

# Test API Gateway endpoint
echo -e "${BLUE}Testing API Gateway endpoint...${NC}"
HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" -X OPTIONS "${API_GATEWAY_URL}/api/audio" -H "Origin: http://localhost:5173" || echo "000")

if [ "$HTTP_STATUS" = "200" ]; then
    echo -e "${GREEN}‚úÖ API Gateway is responding correctly${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  API Gateway returned status: ${HTTP_STATUS}${NC}"
fi

# Test DynamoDB tables
echo -e "${BLUE}Testing DynamoDB tables...${NC}"
TABLES_COUNT=$(aws dynamodb list-tables --region ${AWS_REGION} --query "TableNames[?contains(@, '${PROJECT_NAME}')]" --output text | wc -w)
echo -e "${GREEN}‚úÖ Found ${TABLES_COUNT} DynamoDB tables${NC}"

# Test S3 buckets
echo -e "${BLUE}Testing S3 buckets...${NC}"
BUCKETS_COUNT=$(aws s3 ls | grep ${PROJECT_NAME} | wc -l)
echo -e "${GREEN}‚úÖ Found ${BUCKETS_COUNT} S3 buckets${NC}"

echo ""
echo -e "${GREEN}üéâ Deployment completed successfully!${NC}"
echo ""
echo -e "${BLUE}üìã Deployment Summary:${NC}"
echo -e "${BLUE}Environment: ${ENVIRONMENT}${NC}"
echo -e "${BLUE}API Gateway URL: ${API_GATEWAY_URL}${NC}"
echo -e "${BLUE}Cognito User Pool: ${COGNITO_USER_POOL_ID}${NC}"
echo -e "${BLUE}Audio Bucket: ${AUDIO_BUCKET_NAME}${NC}"
echo -e "${BLUE}PDF Bucket: ${PDF_BUCKET_NAME}${NC}"
echo ""
echo -e "${YELLOW}üìù Next Steps:${NC}"
echo -e "${YELLOW}1. Start the frontend: cd frontend && npm run dev${NC}"
echo -e "${YELLOW}2. Access the app at: http://localhost:5173${NC}"
echo -e "${YELLOW}3. Enable Claude 3 Sonnet in AWS Bedrock console if not done${NC}"
echo -e "${YELLOW}4. Configure authentication if needed${NC}"
echo ""
echo -e "${GREEN}üè• MediVoice AI is ready to use!${NC}"